#include<stdio.h>
#include<stdlib.h>//包含了malloc等一些基本函数
#define N 5 //表的最大容量
int length=0;  //顺序表的当前元素个数

#define TRUE 1 
#define FALSE 0  
#define OK 1
#define ERROR 0
#define INFEASIBLE -1
#define OVERFLOW -2
#define LIST_INIT_SIZE 100//线性表存储的空间初始化分配量
#define LISTINCREAMENT 10 //线性表存储空间的分配增量

typedef struct LNode//线性单链表存储结构
{
 int data;
 struct LNode *next;
}LNode,*LinkList;

int CreatList_L(LinkList&L)//创建一个线性链表
{
 L=(LinkList)malloc(sizeof(LNode));//分配一个空间给链表，作为头结点

 if(!L) exit(OVERFLOW);
 L->next=NULL;
 return OK;
}
int ListInsert_L(LinkList&L,int i,int e)//插入
{
 LinkList p=L;//p指针定位于i-1
 LNode *s;
 int j=0;
 while(p&&j<i-1) {p=p->next;j++;}//定位
 if(!p||j>i-1) return ERROR;//如果i<1或大于链表元素个数+1 
 s=(LNode*)malloc(sizeof(LNode));
 if(!s) exit(OVERFLOW);
 s->data=e;   //完成插入操作
 s->next=p->next;
 p->next=s;
 return OK; 
}

int ListDelet_L(LinkList&L,int i,int&e)//删除链表L中的第i个元素，并返回给e;
{
 LinkList p=L;
 LNode* q;
 int j=0;
 while(!p&&j<i-1) {p=p->next;j++;}//p指针定位于i-1；
 if(!p->next||j>i-1) return ERROR;
 
 e=p->next->data;  //完成删除操作
 q=p->next;
 p->next=p->next->next;
 free(q);
 printf("删除成功\n");
 return OK;


}

int ListTraverse_L(LinkList L,int n)//链表的遍历
{
    int i=0;
    if(!L)return ERROR;
 L=L->next;
 while(L)
 { 
        if(L->data==n)return i;
  L=L->next;
  i++;
 }
 
 return FALSE;
}
void print(LinkList L){
	L=L->next;
 while(L)
 {
	 printf("%d\t",L->data);
	 L=L->next;
 }
 printf("\n");
}
void sort(LinkList L)   //排序
{
 //s=(LinkList)malloc(sizeof(LNode));
 L=L->next; 
 int m=0;
while(L->next)
 {
	//if((L->data)<(L->next->data)){s=L;L=L->next;L->next=s;}

 if((L->data)<(L->next->data))
 {	m=L->data;
 L->data=L->next->data;
 L->next->data=m;
 }
 L=L->next;
 }
}

int InverseSingleList_L(LinkList &L)
{
 if(!L->next||!L->next->next)
  return OK;
 LNode *p,*q;
 p=L->next;     
 q=p->next;
 p->next=NULL;
 p=q;
 while(p)
 {
  q=p->next; 
  p->next=L->next;
  L->next=p;
  p=q;
 }
 return OK;
}

int main()
{
 int List[N];
 LinkList L;

 int ch,exit='N';
 do
 {
  printf("1.创建一个单链表\n");
  printf("2.在单链表中查找元表\n");
  printf("3.在单链表中插入元表\n");
  printf("4.在单链表中删除元表\n");
  printf("5.打印一个单链表\n");
  printf("6.退出\n");
  printf("7.排序\n");
  printf("\n请选择：");
  ch=getchar();
  switch(ch)
  {
   case '1':
        printf("\n请输入五个元素："); 
        CreatList_L(L);
        for(length=0;length<N;length++)
        {
        scanf("%d",&List[length]);
        getchar();
        ListInsert_L(L,length+1,List[length]);
        }
        printf("\n创建成功！\n"); 
       
    break;
   case '2':
	    printf("请输入你要查找的元素：");
        scanf("%d",&List[0]);
        if(ListTraverse_L(L,List[0]))
		{
	    printf("该元素存在该表的第%d个位置\n",ListTraverse_L(L,List[0]));
        printf("要修改此元素么？修改请输入1，不修改请输入0\n");
		int m;
		 scanf("%d",&m);
	 if(1==m){
	 printf("请输入你要修改的值:");
	 int k;
	 scanf("%d",&k);
	 L->data=k;
		}}
	 else printf("不存在该元素\n");
    break;
   case '3':
	    printf("请输入你要插入的位置和元素的值\n");
        scanf("%d%d",&length,&List[0]);
        ListInsert_L(L,length,List[0]);
    break;
   case '4':
	    printf("请输入你要删除第几个元素:");
        scanf("%d",&length);
        ListDelet_L(L,length,List[0]);
    break;
   case '5':
	   print(L);
	   break;
   case '6':
    printf("\n您是否真的要退出程序(Y/N):");
    getchar();
    exit=getchar();
    break;
   case '7':
	   sort(L);
	   break;
  }
  
 }while(exit!='y'&&exit!='Y');
return OK;
} 